37/5
0.4*5
0.4*60
# remove everything from workspace
rm(list = ls())
# set wd to current dir of script
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# setwd("C:/Scratch/Ladwig/lerwq_mendota/src")
library(glmtools)
devtools::install_github("USGS-R/glmtools", ref = "ggplot_overhaul")
install.packages('glmtools')
install.packages('devtools')
devtools::install_github("USGS-R/glmtools", ref = "ggplot_overhaul")
devtools::install_github("aemon-j/GLM3r",ref="v3.1.1")
devtools::install_github("USGS-R/glmtools", ref = "ggplot_overhaul")
devtools::install_github("GLEON/rLakeAnalyzer")
devtools::install_github("aemon-j/gotmtools", ref = "main")
devtools::install_github("aemon-j/SimstratR", ref = "main")
devtools::install_github("aemon-j/MyLakeR", ref = "main")
devtools::install_github("aemon-j/GOTMr", ref = "main")
devtools::install_github("aemon-j/WETr", ref = "main")
devtools::install_github("aemon-j/SelmaprotbasR", ref = "main")
devtools::install_github("aemon-j/PCLakeR", ref = "main")
devtools::install_github("aemon-j/LakeEnsemblR", ref = "main")
devtools::install_github("aemon-j/LakeEnsemblR.WQ", ref = "main")
# remove everything from workspace
rm(list = ls())
# set wd to current dir of script
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# setwd("C:/Scratch/Ladwig/lerwq_mendota/src")
library(glmtools)
library(tidyverse)
library(rLakeAnalyzer)
# devtools::install_github("aemon-j/GLM3r",ref="v3.1.1")
library(GLM3r)
library(lubridate)
library(LakeEnsemblR)
library(LakeEnsemblR.WQ)
library(ggplot2)
library(reshape2)
# read in observed data for calibration
obs_wtemp <- read.csv("../trainingData/MendotaData_wtempdo_checked.csv")
df_wq <- read.csv('../trainingData/MendotaData_checked.csv')
df_chla <- read.csv('../trainingData/MendotaData_chl_total_checked.csv')
df_diatoms <- read.csv('../trainingData/MendotaData_chl_diatoms_checked.csv')
df_cyano <- read.csv('../trainingData/MendotaData_chl_cyano_checked.csv')
df_others <- read.csv('../trainingData/MendotaData_chl_others_checked.csv')
# get the new meteorology file into LER format
# df_meteo <- read.csv('../boundaryconditions/meteorology.csv')
# write.csv(x = df_meteo,file = '../LakeEnsemblR_meteo_standard.csv', quote = F, row.names = F)
# run first LER run to create GLM files
config_file <- "LakeEnsemblR.yaml"
model <- c("GLM", "GOTM", "Simstrat")
setwd('..')
physic <- obs_wtemp %>% mutate(datetime = as.POSIXct(paste0(sampledate,' 00:00:00'))) %>% select(-sampledate)
df_obs <- merge(physic, df_wq %>% mutate(datetime = as.POSIXct(datetime)), by = c('datetime', 'depth'), all = T)
df_obs <- merge(df_obs, df_chla %>% mutate(datetime = as.POSIXct(datetime)), by = c('datetime', 'depth'), all = T)
df_obs <- merge(df_obs, df_diatoms %>% mutate(datetime = as.POSIXct(datetime)), by = c('datetime', 'depth'), all = T)
df_obs <- merge(df_obs, df_cyano %>% mutate(datetime = as.POSIXct(datetime)), by =c('datetime', 'depth'), all = T)
df_obs <- merge(df_obs, df_others %>% mutate(datetime = as.POSIXct(datetime)), by = c('datetime', 'depth'), all = T)
str(df_obs)
head(df_obs)
df_obs %>% filter(datetime == '1995-08-30')
df_obs_transformed = df_obs %>%
mutate(temp = wtemp,
OXY_oxy = o2 * 1000/32,
CAR_pH = ph,
NIT_nit = no3no2 * 1/14,
PHS_frp = drp * 1/31,
SIL_rsi = drsif * 1/28,
OGM_doc = doc * 1000/12,
NIT_amm = nh4 * 1/14,
OGM_ton = totnuf * 1/14, # OGM_dop + OGM_pop + PHS_frp
OGM_top = totpuf * 1/31,#OGM_don + OGM_pon + NIT_amm + NIT_nit
PHY_TCHLA = tot_chl,
PHY_DCHLA = chl_diatoms,
PHY_CCHLA = chl_cyano,
PHY_OCHLA = chl_others) %>%
select(datetime, depth, temp, OXY_oxy, CAR_pH, PHS_frp, OGM_top, NIT_nit, NIT_amm, OGM_ton, OGM_doc, SIL_rsi,
PHY_TCHLA, PHY_DCHLA, PHY_CCHLA, PHY_OCHLA)
write.csv(x = df_obs_transformed, file = 'trainingData/MendotaData_observedGLM_checked.csv', quote = F, row.names = F)
nml_file <- file.path("GLM-AED2/", 'glm3.nml')
eg_nml <- read_nml(nml_file = file.path(nml_file))
out_file <- file.path("GLM-AED2/", "output","output.nc")
var = c('temp', 'OXY_oxy' ,'NIT_nit','NIT_amm', "PHS_frp", 'SIL_rsi', "OGM_doc", 'PHY_TCHLA')         # variable to which we apply the calibration procedure
# which parameter do you want to calibrate? a sensitivity analysis helps
calib_setup <- data.frame('pars' = as.character(c('wind_factor','lw_factor','coef_mix_hyp',"inflow_factor",'Kw','outflow_factor',
'Fsed_oxy', 'Ksed_oxy', 'Kdom_minerl', 'Rdom_minerl',
'Fsed_nit', 'Ksed_nit', 'Knitrif', 'Fsed_amm',
'Fsed_frp',
'Fsed_rsi',
'pd%R_growth', 'pd%R_growth', 'pd%R_growth',
"Fsed_dic", 'Rnitrif', 'Kdenit',  'Ksed_frp',
'Kpom_hydrol',
"pd%R_resp", "pd%R_resp", "pd%R_resp",
"pd%R_nuptake","pd%R_nuptake", "pd%R_nuptake",
"pd%R_puptake",   "pd%R_puptake",   "pd%R_puptake"
)),
'lb' = NA,
'ub' = NA,
'x0' = c(1,1,0.4,1,0.8,1, -150, 50, 60, 0.02, -10, 10, 80, 30, 0.5, 18, 4, 1, 3,
250, 0.5, 3,  200, 60,
0.085,0.085,0.085,
0.068, 0.068, 0.068,
0.009, 0.0039, 0.0039),
'type' = c('glm', 'glm', 'glm','glm', 'glm','glm','aed','aed','aed','aed','aed','aed','aed','aed','aed','aed',
"phyto", 'phyto', 'phyto',
'aed','aed','aed','aed','aed','phyto', 'phyto', 'phyto',
'phyto', 'phyto', 'phyto','phyto', 'phyto', 'phyto'),
'file' = c('glm3.nml', 'glm3.nml', 'glm3.nml','glm3.nml','glm3.nml','glm3.nml', 'aed2.nml','aed2.nml','aed2.nml',
'aed2.nml','aed2.nml','aed2.nml','aed2.nml','aed2.nml','aed2.nml','aed2.nml',
"aed2_phyto_pars.nml", 'aed2_phyto_pars.nml', 'aed2_phyto_pars.nml',
'aed2.nml','aed2.nml','aed2.nml','aed2.nml','aed2.nml',
'aed2_phyto_pars.nml', 'aed2_phyto_pars.nml', 'aed2_phyto_pars.nml',
'aed2_phyto_pars.nml', 'aed2_phyto_pars.nml', 'aed2_phyto_pars.nml',
'aed2_phyto_pars.nml', 'aed2_phyto_pars.nml', 'aed2_phyto_pars.nml'))
calib_setup$lb[ calib_setup$x0 >= 0] = calib_setup$x0[ calib_setup$x0 >= 0] * 0.3
calib_setup$ub[ calib_setup$x0 >= 0] = calib_setup$x0[ calib_setup$x0 >= 0] * 1.7
calib_setup$lb[ calib_setup$x0 < 0] = calib_setup$x0[ calib_setup$x0 < 0] * 1.7
calib_setup$ub[ calib_setup$x0 < 0] = calib_setup$x0[ calib_setup$x0 < 0] * 0.3
calib_setup$lb[5] = 0.01
calib_setup$ub[5] = 2.0
print(calib_setup)
any(calib_setup$lb > calib_setup$ub)
glmcmd = NULL        # command to be used, default applies the GLM3r function
# glmcmd = '/Users/robertladwig/Documents/AquaticEcoDynamics_gfort/GLM/glm'        # custom path to executable
# Optional variables
#outcome of previous calibration runs
period = list('calibration' = list('start' = get_nml_value(eg_nml, 'start'),
'end' = '2004-12-31 23:00:00'),
validation = list('start' = '2004-12-31 23:00:00',
'end' = get_nml_value(eg_nml, 'stop'))) # define a period for the calibration,
# this supports a split-sample calibration (e.g. calibration and validation period)
# the ratio value is the ratio of calibration period to validation period
print(period)
path = "GLM-AED2/"      # simulation path/folder
aed_file = 'aed2'
glm_file = 'glm3'
phyto_file = 'aed2_phyto_pars'
scaling = TRUE       # scaling of the variables in a space of [0,10]; TRUE for CMA-ES
verbose = TRUE
metric = 'NRMSE'      # objective function to be minimized, here the root-mean square error
target.fit = 1e-5     # refers to a target fit of 2.0 degrees Celsius (stops when RMSE is below that)
target.iter = 500    # refers to a maximum run of 20 calibration iterations (stops after that many runs)
pop_members = 20
output = out_file    # path of the output file
field_file = df_obs_transformed # path of the field data
source('src/calibration_script.R')
library(adagio)
library(DEoptim)
result = calibrate_glm(var,
path,
field_file,
aed_file = aed_file,
glm_file = glm_file,
phyto_file = phyto_file,
calib_setup,
glmcmd = NULL,
period,
scaling = FALSE,
verbose = TRUE,
metric = 'NRMSE',
target.fit = target.fit,
target.iter = target.iter,
pop_members = pop_members,
plotting = TRUE,
output,
parallelMode = F)
library(ggplot2)
library(tidyverse)
library(glmtools)
df = read.csv("../GLM-AED2/calib_par.csv")
m.df = reshape2::melt(df, id.vars = c('time','NRMSE'))
ggplot(m.df) +
geom_point(aes(as.POSIXct(time), value, col = NRMSE)) +
facet_wrap(~ variable, scales = 'free') +
scale_colour_continuous(type = rev("viridis"))
ggplot(m.df %>% mutate(y = 0) %>% filter(NRMSE < 10), aes(x = value, col = NRMSE)) +
geom_density() +
facet_wrap(~ variable, scales = 'free') +
geom_jitter(aes(value, y, col = NRMSE), height = 0.001) +
scale_colour_continuous(type = rev("viridis"))
# geom_jitter(data = m.df, aes(time,value), height = 0.01)
df = read.csv("../GLM-AED2/calib_results_nse.csv")
df = df %>% mutate(flag = temp + OXY_oxy + NIT_nit + NIT_amm + PHS_frp + SIL_rsi + OGM_doc +
PHY_TCHLA) %>%
dplyr::filter(flag > -1e8)
# fits_rm = df[-c(which.max(df$NRMSE)), ]
# while(TRUE){
#   df = read.csv("GLM-AED2/calib_results_nse.csv")
#
#   df = df %>% mutate(flag = temp + OXY_oxy + NIT_nit + NIT_amm + PHS_frp + SIL_rsi + OGM_doc +
#                        PHY_TCHLA) %>%
#     dplyr::filter(flag > -1e8)
#   ggplot2::ggplot(reshape2::melt(df, id.vars = c('time', 'NRMSE'))) +
#     geom_point(aes(as.POSIXct(time), value, col = NRMSE)) +
#     geom_line(aes(as.POSIXct(time), value, col = NRMSE)) +
#     theme(legend.position = 'bottom') + xlab('time') + ylab('NSE')+
#     scale_colour_continuous(type = rev("viridis")) +
#     facet_wrap(~variable, scales = 'free')
# }
ggplot2::ggplot(reshape2::melt(df, id.vars = c('time', 'NRMSE'))) +
geom_point(aes(as.POSIXct(time), value, col = NRMSE)) +
geom_line(aes(as.POSIXct(time), value, col = NRMSE)) +
theme(legend.position = 'bottom') + xlab('time') + ylab('NSE')+
scale_colour_continuous(type = rev("viridis")) +
facet_wrap(~variable, scales = 'free')
